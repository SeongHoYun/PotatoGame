using System.Collections;
using System.Collections.Generic;
using UnityEngine;


/*
 * 1. public 으로 설정되어있는 게임 오브젝트에 두가지 게임 오브젝트를 넣어 줘야함
 *       - GetStartBox : LineRenderer , BoxCollider 가 들어가있어야함  {이름을 start 로 지어줘야함 Find. 값을 찾아가기 위함}
 *       - GetEndBox : Default값이면 문제없음   {이름을 end 로 지어줘야함 Find. 값을 찾아가기 위함}
 * 2. 해당 스크립트가 카메라에 들어가있어야함.
 * 
 * 3. 추가 조정 사항 [안해도됨] endBox의 크기의 반 만큼 125번째 줄에서 0.5 값을 조정 해주면 정확한 처리가 가능 
 * 
 * 4. 게임에서 카메라 좌표를 기준으로 삼아서 화면 중앙보다 위에서 터치하면 라인생성이 안됨
 */
 


public class Tuch_script : MonoBehaviour
{
    Vector2 poin;                            //좌표계 전환 변수
    public GameObject GetStartBox;         //생성되는 시작 오브젝트 받아오기
    public GameObject GetEndBox;           //생성되는 끝 오브젝트 받아오기
    GameObject StartBox;                   // 동적 생성되는 오브젝트
    GameObject EnBox;                      //         "    
    LineRenderer lr;                        // 라인랜더러 저장할 장소 생성
    BoxCollider2D bc;                       // 박스 콜라이더 저장소 생성
    Vector3 startPos;                       
    Vector3 endPos;


    // 이 아래 변수들은 각도 및 빗변의 길이를 구하기위한 변수들
    float Pythagoras;
    float high;
    float width;
    float collBoxSize;
    bool max = true;



    //
    float MouX;
    float MouY;
    float SartX;
    float SartY;
    

    private int count = 0;

    void Start()
    {

    }

    public static float AngleInRad(Vector3 vec1, Vector3 vec2)          // 각도 구할떄 너비와 높이를로 tan 계산해주는 함수
    {
        return Mathf.Atan2(vec2.y - vec1.y, vec2.x - vec1.x);
    }

    public static float AngleInDeg(Vector3 vec1, Vector3 vec2)          // 각도 값 리턴해주는 함수
    {
        return AngleInRad(vec1, vec2) * 180 / Mathf.PI;
    }




    void Update()
    {
        poin = Camera.main.ScreenToWorldPoint(Input.mousePosition);         // 스크린좌표계를 월드 좌표계로 전환시킨다.
        if (Input.GetMouseButtonDown(0))
        {
            if (this.transform.position.y > poin.y)
            {

                max = true;
                if (count == 1)                         // 만약 이전에 박스가 있다면?
                {
                    Destroy(StartBox);                 // 시작박스 삭제
                    Destroy(EnBox);                    // 끝 박스 삭제
                    count = 0;
                }
                StartBox = Instantiate(                // 마우스클릭시 시작 박스 동적 생산                    
                    GetStartBox,
                    poin,
                    Quaternion.identity);

                EnBox = Instantiate(                  // 마우스 클릭시 끝 박스 동적 생산
                    GetEndBox,
                    poin,
                    Quaternion.identity);
                startPos = poin;
            }
        }




        if (Input.GetMouseButton(0))
        {
            if(max==true)
            { 
            // 실시간으로 마우스 포지션 잡아서 박스 이동시켜주기 이게 제일 먼저 나와야함! 
            EnBox.transform.position = poin;

            Vector3 StartPos = GameObject.Find("start(Clone)").GetComponent<Transform>().position; // 시작위치 받아서 저장
            Vector3 EndPos = GameObject.Find("end(Clone)").GetComponent<Transform>().position;     // 끝나는 위치 받아서 저장


            MouX = poin.x;
            MouY = poin.y;
            SartX = StartPos.x;
            SartY = StartPos.y;



            lr = StartBox.GetComponent<LineRenderer>();          // 라인랜더러 컴포넌트 추가
            lr.startWidth = .05f;                               // 시작 너비
            lr.endWidth = .05f;                                 // 끝  너비

            bc = StartBox.GetComponent<BoxCollider2D>();       // 캡슐 콜라이더 컴포넌트 받아오기


            high = StartPos.y - EndPos.y;                       // 시작박스에서 끝 박스까지 높이 구하기
            width = StartPos.x - EndPos.x;                      // 시작박스에서 끝 박스까지 너비 구하기

            Pythagoras = high * high + width * width;           // 제곱시켜서 넣기
            collBoxSize = Mathf.Sqrt(Pythagoras);                 // 루트에 피타고라스 넣기


            AngleInRad(StartPos, EndPos);                       // 각도 구해주는 함수인것이다


            //각도를 박스에 적용!
            StartBox.transform.localRotation = Quaternion.Euler(0, 0, AngleInDeg(StartPos, endPos));


            //한놈만 돌아가면 불쌍하니까 너도 적용시켜줄께
            EnBox.transform.localRotation = Quaternion.Euler(0, 0, AngleInDeg(StartPos, endPos));

            bc.offset = new Vector2(collBoxSize / 2, 0);            // 시작지점에서 빗변의 길이의 반틈만큼 왼쪽으로 이동
            bc.size = new Vector2(collBoxSize + 0.5f, 1.0f);      // 빗변의 길이만큼 너비를 조정 0.5는 박스의 크기 만큼 조정

            lr.SetPosition(0, StartPos);     //라인 랜더러 시작위치(0) start을 찾아서 해당 좌표값에 실시간으로 고정시킴
            lr.SetPosition(1, EndPos);       //라인 랜더러 도착위치(1) end을 찾아서 해당 좌표값에 실시간으로 고정시킴
            endPos = poin;


            // 길이가 35이상 늘어날경우 더이상 실행시키지 않는다.. 사실 이부분은 더좋은 해결책이 없어서 이렇게 사용중 ㅠㅠ
            if ((MouX - SartX) * (MouX - SartX) + (MouY - SartY) * (MouY - SartY) > 35.0f)
            {
                max = false;
            }
            }
        } 

        

        if (Input.GetMouseButtonUp(0))          //버튼을 놓았을때 카운트 세서 다음번에 삭제 시켜줌
        {
            count = 1;
        }
    }
}
